#!/usr/bin/env luajit

local logger = require("shared.utils.logger")
local utils = require("shared.utils")

local function run_syntax_checks()
    logger.info("Running Lua syntax checks...")
    
    local lua_files = {}
    local function find_lua_files(dir)
        local handle = io.popen("find " .. dir .. " -name '*.lua' -not -path './luarocks_modules/*' 2>/dev/null")
        if handle then
            for line in handle:lines() do
                table.insert(lua_files, line)
            end
            handle:close()
        end
    end
    
    find_lua_files(".")
    
    local passed = 0
    local failed = 0
    
    for _, file in ipairs(lua_files) do
        local cmd = "luajit -bl \"" .. file .. "\" >/dev/null 2>&1"
        local result = os.execute(cmd)
        
        if result == 0 or result == true then
            logger.debug("‚úì %s", file)
            passed = passed + 1
        else
            logger.error("‚úó Syntax error in %s", file)
            failed = failed + 1
        end
    end
    
    logger.info("Syntax check results: %d passed, %d failed", passed, failed)
    return failed == 0
end

local function run_unit_tests()
    logger.info("Running unit tests...")
    
    local function test_utils()
        local tests_passed = 0
        local tests_total = 0
        
        local function assert_test(condition, test_name)
            tests_total = tests_total + 1
            if condition then
                logger.debug("‚úì %s", test_name)
                tests_passed = tests_passed + 1
            else
                logger.error("‚úó %s", test_name)
            end
        end
        
        assert_test(utils.trim_string("  hello  ") == "hello", "trim_string")
        assert_test(utils.slugify("Hello World!") == "hello-world", "slugify")
        
        local merged = utils.merge_tables({a = 1}, {b = 2})
        assert_test(merged.a == 1 and merged.b == 2, "merge_tables")
        
        local split = utils.split_string("a,b,c", ",")
        assert_test(#split == 3 and split[1] == "a", "split_string")
        
        logger.info("Utils tests: %d/%d passed", tests_passed, tests_total)
        return tests_passed == tests_total
    end
    
    local function test_logger()
        logger.info("Testing logger functionality...")
        logger.debug("Debug message (may not be visible)")
        logger.warn("Warning message")
        logger.error("Error message (for testing)")
        return true
    end
    
    local utils_ok = test_utils()
    local logger_ok = test_logger()
    
    return utils_ok and logger_ok
end

local function run_app_tests()
    logger.info("Running application tests...")
    
    local function test_cli_apps()
        logger.info("Testing CLI applications...")
        
        local todo_help = io.popen("luajit apps/cli/todo-manager.lua --help 2>&1")
        if todo_help then
            local output = todo_help:read("*a")
            todo_help:close()
            
            if output:find("todo") then
                logger.debug("‚úì Todo manager help works")
                return true
            else
                logger.error("‚úó Todo manager help failed")
                return false
            end
        end
        
        return false
    end
    
    local function test_static_site()
        logger.info("Testing static site generator...")
        
        local generator = require("apps.static-site.generator")
        if generator and generator.generate_site then
            logger.debug("‚úì Static site generator module loads")
            return true
        else
            logger.error("‚úó Static site generator module failed to load")
            return false
        end
    end
    
    local cli_ok = test_cli_apps()
    local static_ok = test_static_site()
    
    return cli_ok and static_ok
end

local function generate_test_report(syntax_ok, unit_ok, app_ok)
    local timestamp = os.date("%Y-%m-%d %H:%M:%S")
    local report = string.format([[
# Test Report - %s

## Summary
- Syntax Checks: %s
- Unit Tests: %s  
- Application Tests: %s

## Overall Result: %s

Generated by lua-apps test runner
]], 
        timestamp,
        syntax_ok and "PASSED" or "FAILED",
        unit_ok and "PASSED" or "FAILED", 
        app_ok and "PASSED" or "FAILED",
        (syntax_ok and unit_ok and app_ok) and "ALL TESTS PASSED" or "SOME TESTS FAILED"
    )
    
    utils.write_file("test-report.md", report)
    logger.info("Test report saved to test-report.md")
end

local function main()
    logger.info("Starting lua-apps test suite...")
    
    local syntax_ok = run_syntax_checks()
    local unit_ok = run_unit_tests()
    local app_ok = run_app_tests()
    
    generate_test_report(syntax_ok, unit_ok, app_ok)
    
    local all_passed = syntax_ok and unit_ok and app_ok
    
    if all_passed then
        logger.info("üéâ All tests passed!")
        os.exit(0)
    else
        logger.error("‚ùå Some tests failed!")
        os.exit(1)
    end
end

main()